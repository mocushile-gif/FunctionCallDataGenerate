{
    "{'chainid': 1, 'nftaddress': '0xabc123', 'nftid': 'def456'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftId must be a number string",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0xabc123&nftId=def456",
            "body": {},
            "timestamp": "2023-07-10T06:33:29.928Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0xabc123', 'nftid': '456'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0xabc123&nftId=456",
            "body": {},
            "timestamp": "2023-07-10T06:33:34.156Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0xabc123', 'nftid': '123456'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0xabc123&nftId=123456",
            "body": {},
            "timestamp": "2023-07-10T06:42:18.252Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0xabc123', 'nftid': '789'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0xabc123&nftId=789",
            "body": {},
            "timestamp": "2023-07-10T11:21:03.821Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0xabc123', 'nftid': 'def789'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftId must be a number string",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0xabc123&nftId=def789",
            "body": {},
            "timestamp": "2023-07-10T11:21:15.112Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0xabcdef', 'nftid': '12345'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0xabcdef&nftId=12345",
            "body": {},
            "timestamp": "2023-07-11T05:58:51.474Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x... (replace with the NFT contract address)', 'nftid': '12345 (replace with the NFT ID)'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftId must be a number string",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x...+(replace+with+the+NFT+contract+address)&nftId=12345+(replace+with+the+NFT+ID)",
            "body": {},
            "timestamp": "2023-07-18T07:29:26.400Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x... (replace with the NFT contract address)', 'nftid': '67890 (replace with the NFT ID)'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftId must be a number string",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x...+(replace+with+the+NFT+contract+address)&nftId=67890+(replace+with+the+NFT+ID)",
            "body": {},
            "timestamp": "2023-07-18T07:34:31.380Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x... (replace with the NFT contract address)', 'nftid': '12345 (replace with the NFT ID as a numeric string)'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftId must be a number string",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x...+(replace+with+the+NFT+contract+address)&nftId=12345+(replace+with+the+NFT+ID+as+a+numeric+string)",
            "body": {},
            "timestamp": "2023-07-18T07:34:40.342Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x... (replace with the NFT contract address)', 'nftid': '12345'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x...+(replace+with+the+NFT+contract+address)&nftId=12345",
            "body": {},
            "timestamp": "2023-07-18T07:34:50.448Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x... (replace with the valid Ethereum address of the NFT contract)', 'nftid': '12345'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x...+(replace+with+the+valid+Ethereum+address+of+the+NFT+contract)&nftId=12345",
            "body": {},
            "timestamp": "2023-07-18T07:35:02.753Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x... (replace with a valid Ethereum address of the NFT contract)', 'nftid': '12345'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x...+(replace+with+a+valid+Ethereum+address+of+the+NFT+contract)&nftId=12345",
            "body": {},
            "timestamp": "2023-07-18T07:35:11.365Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x123abc', 'nftid': '12345'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x123abc&nftId=12345",
            "body": {},
            "timestamp": "2023-07-18T07:36:35.586Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x123abc (replace with the valid NFT contract address)', 'nftid': '54321 (replace with the valid NFT ID as a numeric string)'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftId must be a number string",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x123abc+(replace+with+the+valid+NFT+contract+address)&nftId=54321+(replace+with+the+valid+NFT+ID+as+a+numeric+string)",
            "body": {},
            "timestamp": "2023-07-18T07:36:56.587Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x... (replace with the NFT contract address)', 'nftid': '98765 (replace with the NFT ID as a numeric string)'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftId must be a number string",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x...+(replace+with+the+NFT+contract+address)&nftId=98765+(replace+with+the+NFT+ID+as+a+numeric+string)",
            "body": {},
            "timestamp": "2023-07-18T07:37:08.853Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x... (replace with the NFT contract address)', 'nftid': '54321 (replace with the NFT ID as a numeric string)'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftId must be a number string",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x...+(replace+with+the+NFT+contract+address)&nftId=54321+(replace+with+the+NFT+ID+as+a+numeric+string)",
            "body": {},
            "timestamp": "2023-07-18T07:37:25.388Z"
        }
    },
    "{'chainid': 137, 'nftaddress': '0xabc123', 'nftid': '123'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=137&nftAddress=0xabc123&nftId=123",
            "body": {},
            "timestamp": "2023-07-18T08:24:17.524Z"
        }
    },
    "{'chainid': 137, 'nftaddress': '0xabc123', 'nftid': 'def456'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftId must be a number string",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=137&nftAddress=0xabc123&nftId=def456",
            "body": {},
            "timestamp": "2023-07-18T08:24:52.860Z"
        }
    },
    "{'chainid': 137, 'nftaddress': '0xabc123', 'nftid': '456'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=137&nftAddress=0xabc123&nftId=456",
            "body": {},
            "timestamp": "2023-07-18T08:33:31.347Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x789xyz', 'nftid': '123456'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x789xyz&nftId=123456",
            "body": {},
            "timestamp": "2023-07-18T16:47:20.486Z"
        }
    },
    "{'chainid': 1, 'nftaddress': '0x123456', 'nftid': '12345'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=1&nftAddress=0x123456&nftId=12345",
            "body": {},
            "timestamp": "2023-07-18T16:47:50.102Z"
        }
    },
    "{'chainid': 56, 'nftaddress': '0xabc123', 'nftid': '12345'}": {
        "error": "",
        "response": {
            "statusCode": 400,
            "message": "nftAddress must be an Ethereum address",
            "method": "GET",
            "path": "/nft/nftOwner?chainId=56&nftAddress=0xabc123&nftId=12345",
            "body": {},
            "timestamp": "2023-07-18T21:06:14.366Z"
        }
    }
}